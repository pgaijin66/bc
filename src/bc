#!/usr/bin/env bash

set -o errexit
set -o pipefail

# Globals
COMMIT_MSG_LEN=20
MAIN_BRANCH="main"

error(){
    echo "ERROR: $*" >&2
}

info(){
    echo "INFO: $*" >&2
}

usage(){
    cat <<EOF
BetterCommit (bc) is a small utility which will help you make an habit of writing better commit messages.

Usage: ${0##*/} <subcommands>

Available commands:
    add         Adds all the changes to staging area
    commit      Adds and commits all the changes
    branch      Creates a new branch
    pr          Creates a new pull request

Example usage:

    $ ${0##*/} add

EOF
}

# helper functions
function has_git(){
    if [ ! -d ".git" ]; then info "This is not a git repo. I am not needed here. Ta Ta !!!"; exit 1; fi
}

function is_main_branch(){
    local branch_name=$1
    if [[ $branch_name == "$MAIN_BRANCH" ]];
    then
        echo true; 
    else 
        echo false; 
    fi
}

function get_current_branch_name(){
    local current_branch_name
    current_branch_name=$(git rev-parse --abbrev-ref HEAD)
    echo "$current_branch_name"
}

function prepare_commit(){
    read -r -p "Is this commit related to any projects tickets / Components / features (eg: JIRA-124, button, vpc): " TICKET
    read -r -p "Enter which git operation did you performed (eg: add, update, del): " OPERATION
    info "Files modified"
    git status --porcelain
    read -r -p "What did you $OPERATION: " COMMITMSG
    case "$OPERATION" in
        add | update | del )
            messagelength=${#COMMITMSG}
            if [[ "$messagelength" -le $COMMIT_MSG_LEN ]]; then
                info "COMMIT MESSAGE TOO SHORT. COMMIT MESSAGE SHOULD BE AT LEAST $COMMIT_MSG_LEN CHARS LONG."
            fi
            ;;
        *)
            info "Operation \"$OPERATION\" not understood."
            exit 1
            ;;
    esac
    commit "$OPERATION" "$TICKET" "$COMMITMSG"

}

function is_branch_exists_in_origin(){
    local branchName=$1
    val=$(git ls-remote --heads origin "$branchName" | wc -l)
    if [[ "$val" -gt 0 ]];then echo true; else echo false; fi
}

function add(){
    git add .
}

function commit(){
    local operation=$1
    local ticket=$2
    local commitmessage=$3
    
    local current_branch_name
    current_branch_name=$(get_current_branch_name)
    res=$(is_main_branch "$current_branch_name")
    if [[ $res == true ]];then 
        echo ""
        error "Not recommended to commit to $MAIN_BRANCH branch. Please create a new branch using \"bc branch\""
        exit 1
    fi

    git add .
    git commit -m "$operation($ticket): $commitmessage"
}

function branch(){
    local branch_name
    local sanitized_branch_name

	read -r -p "Is this commit related to any projects tickets / Components / features (eg: JIRA-124, button, vpc): " TICKET
	read -r -p "What kind of work is this (eg: bugfix, feat, demo, test): " OPERATION
    read -r -p "What work will be done in this branch: " WORK

    branch_name="$OPERATION/$TICKET/$WORK"
    # Sanitize branch name by removing all the spaces with dash "-"
    sanitized_branch_name=${branch_name// /-}
    git checkout -b "$sanitized_branch_name"
}

function push(){
    local current_branch_name
    current_branch_name=$(get_current_branch_name)
    res=$(is_main_branch "$current_branch_name")
    if [[ $res == true ]]; then error "Not recommended to push to main branch. Please create a new branch using \"bc branch\""; exit 1; fi

    if [[ $(git status --porcelain | wc -l ) -ne 0 ]];then 
        read -r -p "There are still changes to be committed. Are you sure you want to push? [y/N] " response
        case "$response" in
            [yY][eE][sS]|[yY])
                git push --set-upstream origin "$current_branch_name"
                ;;
            *)
                info "Please commit the changes using \"bc commit\""
                exit 1
                ;;
        esac
    fi
    git push --set-upstream origin "$current_branch_name"
}

function create_pr(){
    local current_branch_name
    local repositoryName
    local gh_token

    current_branch_name=$(get_current_branch_name)
    res=$(is_branch_exists_in_origin "$current_branch_name")
    if [[ $res == false ]];then 
        echo ""
        error "Branch: \"$current_branch_name\" has not been pushed to origin. Please push and try again. Try running \"bc push\" or \"bc help\""
        exit 1
    fi

    repositoryName="$(basename "$(git rev-parse --show-toplevel)")"
    gh_token="$GH_TOKEN"
    repoOwner=$(git remote -v | tail -1 | awk -F ':' '{print $2}' | cut -d "/" -f 1)
    
    read -r -p "Title of the Pull Request: " prTitle
    read -r -p "Is this PR associated with any ticket (eg: JIRA-124]): " prTicket
    printf "Explain work done in this PR (When finished hit ctrl-d on a new line to proceed):\n"
    
    # this will load the user's input into a variable instead of a file 
    prMessage="" 
    prMessage+=$( xargs -0 ) 
    prMessage+="" 
    read -r -p "PR type (eg: SHOW, SHIP. ASK): " prType
    read -r -p "What kind of change is this (eg: Bufix, Feature, Breaking Change, Doc update): " prChangeType

    read -r -p "Source branch name: " srcBranch
    read -r -p "Destination branch name: " destBranch

    github_url="https://api.github.com/repos/$repoOwner/$repositoryName/pulls"

    updated_title="$prTicket($prType): $prTitle"

    local prBody
    prBody=$(cat <<EOF
# Change Description

$prMessage

-------------------------------------------


# Type of PR

- [X] $prType

-------------------------------------------


# Type of Change

- [X] $prChangeType

-------------------------------------------

## Checklist before requesting a review
- [X] I have performed a self-review of my code
- [X] I am ready to get this code reviewed
- [X] I have locally tested this code against linting and validating.
EOF
)

    payloadJson=$( jq -n \
                    --arg title "$updated_title" \
                    --arg body "$prBody" \
                    --arg head "$srcBranch" \
                    --arg base "$destBranch" \
                    '{"title": $title, "body": $body, "head": $head, "base": $base}' )

    curl -L -X POST -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $gh_token" \
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "$github_url" \
                     -d "$payloadJson"


}

function main(){
    local commandName=$1; shift
    case "$commandName" in
        commit)
            has_git
            prepare_commit
            ;;
        add)
            has_git
            add
            ;;
        branch)
            has_git
            branch
            ;;
        push)
            has_git
            push
            ;;
        help)
            usage
            exit 1
            ;;
        pr)
            if [ -z "$GH_TOKEN" ]; then
                echo "GH_TOKEN env var is not set. Please set GH_TOKEN and then try again"
                exit 1
            fi
            create_pr
            exit 1
            ;;
        *)
            echo "$commandName"
            error "Could not understand the command. Try running \"bc help\"."
            exit 1
            ;;
    esac
}

# Check if the script is being sourced
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    return
fi

if [ "$#" == 0 ]; then
    echo $#
    info "Not enough argument provided."
    echo ""
    usage
    exit 1
fi

main "$@"