#!/usr/bin/env bash

set -o errexit
set -o pipefail

# Globals
COMMIT_MSG_LEN=20
MAIN_BRANCH="main"

error(){
    echo "ERROR: $*" >&2
}

info(){
    echo "INFO: $*" >&2
}

usage(){
    cat <<EOF
BetterCommit (bc) is a small utility which will help you make an habit of writing better commit messages.

Usage: ${0##*/} <subcommands>

Available commands:
    add         Adds all the changes to staging area
    commit      Adds and commits all the changes
    branch      Creates a new branch

Example usage:

    ${0##*/} add

EOF
}

# helper functions
function has_git(){
    if [ ! -d ".git" ]; then info "This is not a git repo. I am not needed here. Ta Ta !!!"; exit 1; fi
}

function is_main_branch(){
    local branch_name=$1
    if [[ $current_branch_name == "$MAIN_BRANCH" ]];then echo true; else echo false; fi
}

function get_current_branch_name(){
    local current_branch_name
    current_branch_name=$(git rev-parse --abbrev-ref HEAD)
    echo $current_branch_name
}

function prepare_commit(){
    read -r -p "Is this commit related to any projects tickets / Components / features (eg: JIRA-124, button, vpc): " TICKET
    read -r -p "Enter which git operation did you performed (eg: add, update, del): " OPERATION
    info "Files modified"
    git status --porcelain
    read -r -p "What did you $OPERATION: " COMMITMSG
    case "$OPERATION" in
        add | update | del )
            messagelength=${#COMMITMSG}
            if [[ "$messagelength" -le $COMMIT_MSG_LEN ]]; then
                echo "COMMIT MESSAGE TOO SHORT. COMMIT MESSAGE SHOULD BE AT LEAST $COMMIT_MSG_LEN CHARS LONG."
            fi
            ;;
        *)
            read -q "REPLY?Operation \"$OPERATION\" not understood."
            exit 1
            ;;
    esac
    commit "$OPERATION" "$TICKET" "$COMMITMSG"

}

function commit(){
    local operation=$1
    local ticket=$2
    local commitmessage=$3
    
    local current_branch_name
    current_branch_name=$(get_current_branch_name)
    res=$(is_main_branch "$current_branch_name")
    echo $res
    if [[ $res == true ]];then 
        echo ""
        error "Cannot commit to $MAIN_BRANCH branch. Please create a new branch using \"bc branch\""
        exit 1
    fi

    git add .
    git commit -m "$operation($ticket): $commitmessage"
}

function branch(){
    local branch_name
    local sanitized_branch_name

	read -r -p "Is this commit related to any projects tickets / Components / features (eg: JIRA-124, button, vpc): " TICKET
	read -r -p "What kind of work is this (eg: bugfix, feat, demo, test): " OPERATION
    read -r -p "What work will be done in this branch: " WORK

    branch_name="$OPERATION/$TICKET/$WORK"
    # Sanitize branch name by removing all the spaces with dash "-"
    sanitized_branch_name=${branch_name// /-}
    git checkout -b "$sanitized_branch_name"
}

function push(){
    local current_branch_name
    current_branch_name=$(get_current_branch_name)
    res=$(is_main_branch "$current_branch_name")
    if [[ $res == true ]]; then error "Cannot push to main branch. Please create a new branch using \"bc branch\""; exit 1; fi

    if [[ $(git status --porcelain | wc -l ) -ne 0 ]];then 
        read -r -p "There are still changes to be committed. Are you sure you want to push? [y/N] " response
        echo $response
        case "$response" in
            [yY][eE][sS]|[yY])
                git push --set-upstream origin $current_branch_name
                ;;
            *)
                info "Please commit the changes using \"bc commit\""
                exit 1
                ;;
        esac
    fi
}

function main(){
    local commandName=$1; shift
    case "$commandName" in
        commit)
            has_git
            prepare_commit
            ;;
        branch)
            branch
            ;;
        push)
            push
            ;;
        help)
            usage
            exit 1
            ;;
        *)
            error "Could not understand the command. Try running \"bc help\"."
            exit 1
            ;;
    esac
}

if [ "$#" != 1 ]; then
    info "Not enough argument provided."
    echo ""
    usage
    exit 1
fi

main "$@"